import{_ as i}from"./chunks/DocsPackageVersion.vue_vue_type_script_setup_true_lang.Hzw28_zM.js";import{o as e,c as t,k as s,a as n,t as l,I as o,R as r}from"./chunks/framework.mpaTk55L.js";const p={id:"frontmatter-title",tabindex:"-1"},c=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),h=r(`<p>For prototyping, VueVentus comes with a color palette that tweaks Tailwind CSS&#39;s default color palette slightly for dark/light mode accessibility reasons. However, this file is only meant for prototyping! A production application would want to control many if not all of the visual characteristics VueVentus provides generically.</p><h2 id="twcss-colors-tool" tabindex="-1">TWCSS Colors Tool <a class="header-anchor" href="#twcss-colors-tool" aria-label="Permalink to &quot;TWCSS Colors Tool&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">HEX COLOR CODE BLUES</p><p>Sadly, it&#39;s no small task to pick a full palette of colors that work well together, and then tint (add white tones) and shade (add dark tones) each one several times to get a full palette.</p></div><p>Luckily, there&#39;s a tool from <a href="https://github.com/oberocks" target="_blank" rel="noreferrer">@oberocks</a> specifically for this tedious task.</p><p>Here&#39;s the steps to complete:</p><ol><li>Visit and use the free <a href="https://tailwind.mattmct.com/" target="_blank" rel="noreferrer">TWCSS Colors Tool</a></li><li>Create, test out, and copy your JSON color palette data with the tool</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The TWCSS Colors Tool allows you to copy the raw JSON data or download a file</p></div><h2 id="adding-color-config-to-tailwind" tabindex="-1">Adding Color Config to Tailwind <a class="header-anchor" href="#adding-color-config-to-tailwind" aria-label="Permalink to &quot;Adding Color Config to Tailwind&quot;">​</a></h2><p>Once you have your JSON color palette data, add your file or create a file called <code>app.colors.json</code> in your project <code>./src</code> directory, and paste in your JSON color palette data.</p><p>You should now have a <code>./src/app.colors.json</code> file in your project containing your app&#39;s JSON color palette data!</p><div class="tip custom-block"><p class="custom-block-title">AFTER THE GETTING STARTED GUIDE</p><p>Now we can use our <code>./src/app.colors.json</code> file in our project&#39;s <code>./tailwind.config.cjs</code> file, instead of pulling our colors from the VueVentus package like we did in the Getting Started guide.</p></div><p>Let&#39;s open up our <code>./tailwind.config.cjs</code> file and change the following line:</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> appColors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/app.colors.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>And of course this means we&#39;ll also need to change the variable reference for the one we just replaced deeper in the <code>./tailwind.config.cjs</code> file like so:</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    theme: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        extend: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        colors: appColors,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="accessing-color-data" tabindex="-1">Accessing Color Data <a class="header-anchor" href="#accessing-color-data" aria-label="Permalink to &quot;Accessing Color Data&quot;">​</a></h2><p>Additionally, we can also access this data within our application and with our components directly... which really comes in handy for multi-color situations like JavaScript driven charts and SVGs!</p><p>Here&#39;s what that looks like for the default naming conventions the <a href="https://tailwind.mattmct.com/" target="_blank" rel="noreferrer">TWCSS Colors Tool</a> provides:</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appColors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./src/app.colors.json&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> red</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appColors.red[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;400&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> coolGray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appColors.coolGray[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;600&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,19),E=JSON.parse('{"title":"app.colors.json File","description":"","frontmatter":{"title":"app.colors.json File"},"headers":[],"relativePath":"modules/data/app-colors-json.md","filePath":"modules/data/app-colors-json.md","lastUpdated":1660177950000}'),d={name:"modules/data/app-colors-json.md"},y=Object.assign(d,{setup(k){return(a,u)=>(e(),t("div",null,[s("h1",p,[n(l(a.$frontmatter.title)+" ",1),c]),h,o(i)]))}});export{E as __pageData,y as default};
