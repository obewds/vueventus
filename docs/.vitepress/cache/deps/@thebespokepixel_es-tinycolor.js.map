{
  "version": 3,
  "sources": ["../../../../node_modules/@thebespokepixel/es-tinycolor/esm/index.js"],
  "sourcesContent": ["const mathRound = Math.round;\nconst mathMin = Math.min;\nconst mathMax = Math.max;\nconst isOnePointZero = n => typeof n === 'string' && n.includes('.') && Number.parseFloat(n) === 1;\nconst isPercentage = n => typeof n === 'string' && n.includes('%');\nconst roundIf01 = n => n < 1 ? mathRound(n) : n;\nconst roundAlpha = a => mathRound(100 * a) / 100;\nconst boundAlpha = a => {\n\ta = Number.parseFloat(a);\n\treturn (Number.isNaN(a) || a < 0 || a > 1) ? 1 : a\n};\nconst hasAlpha = rgba => rgba.a < 1 && rgba.a >= 0;\nconst clamp01 = value => mathMin(1, mathMax(0, value));\nconst pad2 = c => c.length === 1 ? `0${c}` : `${c}`;\nconst CSS_INTEGER = '[-\\\\+]?\\\\d+%?';\nconst CSS_NUMBER = '[-\\\\+]?\\\\d*\\\\.\\\\d+%?';\nconst CSS_UNIT = `(?:${CSS_NUMBER})|(?:${CSS_INTEGER})`;\nconst isValidCSSUnit = color => new RegExp(CSS_UNIT).test(color);\nconst isValidCSSUnitRGB = rgb => isValidCSSUnit(rgb.r) && isValidCSSUnit(rgb.g) && isValidCSSUnit(rgb.b);\nconst PERMISSIVE_MATCH3 = `[\\\\s|\\\\(]+(${CSS_UNIT})[,|\\\\s]+(${CSS_UNIT})[,|\\\\s]+(${CSS_UNIT})\\\\s*\\\\)?`;\nconst PERMISSIVE_MATCH4 = `[\\\\s|\\\\(]+(${CSS_UNIT})[,|\\\\s]+(${CSS_UNIT})[,|\\\\s]+(${CSS_UNIT})[,|\\\\s]+(${CSS_UNIT})\\\\s*\\\\)?`;\nfunction bound01(n, max) {\n\tif (isOnePointZero(n)) {\n\t\tn = '100%';\n\t}\n\tconst processPercent = isPercentage(n);\n\tn = mathMin(max, mathMax(0, Number.parseFloat(n)));\n\tif (processPercent) {\n\t\tn = Number.parseInt(n * max, 10) / 100;\n\t}\n\tif ((Math.abs(n - max) < 0.000_001)) {\n\t\treturn 1\n\t}\n\treturn (n % max) / Number.parseFloat(max)\n}\n\n/**\n * Converts a base-16 hex value into a base-10 integer\n *\n * @alias converters.convertHexToInt\n * @param  {string} val Hexadecimal input value\n * @return {number}     Integer value\n */\nconst convertHexToInt = value => Number.parseInt(value, 16);\n/**\n * Converts a hex value to a decimal\n *\n * @alias converters.convertHexToDecimal\n * @param  {string} h Hexadecimal input value\n * @return {number}   Decimal value\n */\nconst convertHexToDecimal = h => convertHexToInt(h) / 255;\n/**\n * Replace a decimal with it's percentage value\n *\n * @alias converters.convertToPercentage\n * @param  {number} n Decimal input value\n * @return {string}   Percentage string\n */\nconst convertToPercentage = n => n <= 1 ? `${n * 100}%` : n;\n/**\n * Handle conversion of internal precise values to exportable values. Should be\n * able to accept a tinycolour instance 'this' value.\n *\n * @alias converters.rawToRgba\n * @param  {object} raw { _r, _g, _b, _a } with _r, _g, _b in [0.0, 255.0] and _a in [0, 1]\n * @return {object}     { r, g, b } in [0, 255]\n */\nconst rawToRgba = raw => {\n\tconst [r, g, b] = [raw._r, raw._g, raw._b].map(value => mathRound(value));\n\treturn {r, g, b, a: raw._roundA}\n};\n/**\n * Handle conversion of internal precise values to exportable values,\n * maintaining deep precision. Should be able to accept a tinycolour instance\n * 'this' value.\n *\n * @alias converters.rawToDeepRgba\n * @param  {object} raw { _r, _g, _b, _a } with _r, _g, _b in [0.0, 255.0] and _a in [0, 1]\n * @return {object}     { r, g, b, a } in [0.0, 255.0]\n */\nconst rawToDeepRgba = raw => ({r: raw._r, g: raw._g, b: raw._b, a: raw._a});\n/**\n * Handle bounds / percentage checking to conform to CSS color spec\n * @link{http://www.w3.org/TR/css3-color/|www.w3.org/TR/css3-color}\n *\n * @alias converters.conformRgba\n * @param  {object} rgba { r, g, b, a } in [0, 255] or [0, 1]\n * @return {object}      { r, g, b } in [0, 255]\n */\nconst conformRgba = rgba => {\n\tconst [r, g, b] = [rgba.r, rgba.g, rgba.b].map(n => bound01(n, 255) * 255);\n\treturn {r, g, b, a: boundAlpha(rgba.a)}\n};\nconst rgbaToPercentageRgba = rgba => {\n\tconst [r, g, b] = [rgba.r, rgba.g, rgba.b].map(n => `${mathRound(bound01(n, 255) * 100)}%`);\n\treturn {r, g, b, a: rgba.a}\n};\nconst rgbaToString = rgba => (rgba.a === 1)\n\t? `rgb(${rgba.r}, ${rgba.g}, ${rgba.b})`\n\t: `rgba(${rgba.r}, ${rgba.g}, ${rgba.b}, ${rgba.a})`;\nconst rgbaToArray = rgba => (rgba.a === 1) ? [rgba.r, rgba.g, rgba.b] : [rgba.r, rgba.g, rgba.b, mathRound(rgba.a * 255)];\n/**\n * Convert RGBA to hexadecimal\n *\n * Converts an RGBA color plus alpha transparency to hex\n * Assumes r, g, b are contained in the set [0, 255] and\n * a in [0, 1]. Returns a 4 or 8 character rgba hex\n *\n * @alias converters.rgbaToHex\n * @param      {object}    rgba        The rgba object.\n * @param      {boolean}   allowShort  Allow short hex output\n * @return     {string}    The hex output.\n */\nconst rgbaToHex = (rgba, allowShort) => {\n\tconst hex = rgbaToArray(rgba).map(n => n.toString(16)).map(value => pad2(value));\n\treturn allowShort && hex.every(h => h.charAt(0) === h.charAt(1)) ? hex.map(h => h.charAt(0)).join('') : hex.join('')\n};\n/**\n * Convert RGB to hexadecimal\n *\n * Converts an RGBA color plus alpha transparency to hex\n * Assumes r, g, b are contained in the set [0, 255]. Returns a 3 or 6 character rgba hex\n *\n * @alias converters.rgbToHex\n * @param      {object}    rgb        The rgb object.\n * @param      {boolean}   allowShort  Allow short hex output\n * @return     {string}    The hex output.\n */\nconst rgbToHex = (rgba, allowShort) => rgbaToHex({...rgba, a: 1}, allowShort);\n\n/**\n * Calculates the brightness.\n * http://www.w3.org/TR/AERT#color-contrast\n *\n * @alias calculations.calcBrightness\n * @param      {object}  rgb     The rgb\n * @return     {number}  The brightness.\n */\nconst calcBrightness = rgb => ((rgb.r * 299) + (rgb.g * 587) + (rgb.b * 114)) / 1000;\n/**\n * Calculates the luminance.\n * http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n *\n * @alias calculations.calcLuminance\n * @param  {TinyColor} rgb The rgb color\n * @return {number}    The luminance.\n */\nfunction calcLuminance(rgb) {\n\tconst RsRGB = rgb.r / 255;\n\tconst GsRGB = rgb.g / 255;\n\tconst BsRGB = rgb.b / 255;\n\tconst R = RsRGB <= 0.039_28 ? RsRGB / 12.92 : ((RsRGB + 0.055) / 1.055) ** 2.4;\n\tconst G = GsRGB <= 0.039_28 ? GsRGB / 12.92 : ((GsRGB + 0.055) / 1.055) ** 2.4;\n\tconst B = BsRGB <= 0.039_28 ? BsRGB / 12.92 : ((BsRGB + 0.055) / 1.055) ** 2.4;\n\treturn (0.2126 * R) + (0.7152 * G) + (0.0722 * B)\n}\n/**\n * Calculates the mix of two colors.\n *\n * @alias calculations.calcMix\n * @param      {TinyColor}  color1  The first color\n * @param      {TinyColor}  color2  The second color\n * @param      {number}     amount  The amount to mix\n * @return     {TinyColor}  The mixed color.\n */\nfunction calcMix(color1, color2, amount) {\n\tamount = (amount === 0) ? 0 : (amount || 50);\n\tconst rgb1 = new TinyColor(color1).toRgb();\n\tconst rgb2 = new TinyColor(color2).toRgb();\n\tconst p = amount / 100;\n\tconst rgba = {\n\t\tr: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n\t\tg: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n\t\tb: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n\t\ta: ((rgb2.a - rgb1.a) * p) + rgb1.a,\n\t};\n\treturn new TinyColor(rgba)\n}\n\n/**\n * Return valid WCAG2 parameters for isReadable.\n *\n * @alias readability.validateWCAG2Parms\n * @param      {object}  parms       The parameters\n * @param      {object}  parms.level The level to test \"AA\" or \"AAA\" (default \"AA\")\n * @param      {object}  parms.size  The content size to test \"large\" or \"small\" (default \"small\")\n * @return     {object}  sanitized parameters\n */\nfunction validateWCAG2Parms(parms) {\n\tlet level;\n\tlet size;\n\tparms = parms || {\n\t\tlevel: 'AA',\n\t\tsize: 'small',\n\t};\n\tlevel = (parms.level || 'AA').toUpperCase();\n\tsize = (parms.size || 'small').toLowerCase();\n\tif (level !== 'AA' && level !== 'AAA') {\n\t\tlevel = 'AA';\n\t}\n\tif (size !== 'small' && size !== 'large') {\n\t\tsize = 'small';\n\t}\n\treturn {level, size}\n}\n/**\n * Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\n *\n * @param      {TinyColor}  color1  The first color\n * @param      {TinyColor}  color2  The second color\n * @return     {number}             The color contrast defined by (WCAG Version 2)\n */\nfunction readability(color1, color2) {\n\tconst c1 = new TinyColor(color1);\n\tconst c2 = new TinyColor(color2);\n\treturn (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05)\n}\n/**\n * Ensure that foreground and background color combinations meet WCAG2 guidelines.\n *\n * @param   {TinyColor}        color1        The first color\n * @param   {TinyColor}        color2        The second color\n * @param   {object}           wcag2         The WCAG2 properties to test\n * @param   {object}           wcag2.level   The level to test \"AA\" or \"AAA\" (default \"AA\")\n * @param   {object}           wcag2.size    The content size to test \"large\" or \"small\" (default \"small\")\n * @example Tinycolor.isReadable(\"#000\", \"#111\") → false\n * @example Tinycolor.isReadable(\"#000\", \"#111\", {level:\"AA\",size:\"large\"}) → false\n * @return  {(boolean|number)} True if readable, False otherwise.\n */\nfunction isReadable(color1, color2, wcag2) {\n\tconst readable = readability(color1, color2);\n\tconst wcag2Parms = validateWCAG2Parms(wcag2);\n\tlet out = false;\n\tswitch (wcag2Parms.level + wcag2Parms.size) {\n\t\tcase 'AAlarge':\n\t\t\tout = readable >= 3;\n\t\t\tbreak\n\t\tcase 'AAAsmall':\n\t\t\tout = readable >= 7;\n\t\t\tbreak\n\t\tdefault:\n\t\t\tout = readable >= 4.5;\n\t}\n\treturn out\n}\n/**\n * Given a base color and a list of possible foreground or background colors for that\n * base, returns the most readable color.\n *\n * Optionally returns Black or White if the most readable color is unreadable.\n *\n * @param   {TinyColor}    baseColor                     The base color\n * @param   {[TinyColor]}  colorList                     An array of TinyColors\n * @param   {object}       [args={}]                     The arguments\n * @param   {boolean}      args.includeFallbackColors    Include fallback colors?\n * @param   {object}       args.level                    The level to test \"AA\" or \"AAA\" (default \"AA\")\n * @param   {object}       args.size                     The content size to test \"large\" or \"small\" (default \"small\")\n * @example Tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"], {includeFallbackColors:false}).toHexString(); // \"#112255\"\n * @example Tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"], {includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n * @example Tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"], {includeFallbackColors:true, level:\"AAA\", size:\"large\"}).toHexString(); // \"#faf3f3\"\n * @example Tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"], {includeFallbackColors:true, level:\"AAA\", size:\"small\"}).toHexString(); // \"#ffffff\"\n * @return  {TinyColor}    A TinyColor instance of the msot readable color.\n */\nfunction mostReadable(baseColor, colorList, args = {}) {\n\tconst {includeFallbackColors, level, size} = args;\n\tlet readable;\n\tlet bestColor = null;\n\tlet bestScore = 0;\n\tfor (const color of colorList) {\n\t\treadable = readability(baseColor, color);\n\t\tif (readable > bestScore) {\n\t\t\tbestScore = readable;\n\t\t\tbestColor = new TinyColor(color);\n\t\t}\n\t}\n\tif (isReadable(baseColor, bestColor, {level, size}) || !includeFallbackColors) {\n\t\treturn bestColor\n\t}\n\targs.includeFallbackColors = false;\n\treturn mostReadable(baseColor, ['#fff', '#000'], args)\n}\n\nfunction combine(action, args) {\n\tconst actions = {monochromatic, analogous, complement, splitcomplement, triad, tetrad};\n\treturn actions[action](...args)\n}\n/**\n * Find the complementary color.\n *\n * @param      {TinyColor}     color   The color\n * @return     {TinyColor}  The new complementary Tinycolor.\n */\nfunction complement(color) {\n\tconst hsl = new TinyColor(color).toHsl();\n\thsl.h = (hsl.h + 180) % 360;\n\treturn new TinyColor(hsl)\n}\n/**\n * Find the color triad colors.\n *\n * @param      {TinyColor}    color   The color\n * @return     {[TinyColor]}  An array of 3 triad TinyColors.\n */\nfunction triad(color) {\n\tconst hsl = new TinyColor(color).toHsl();\n\tconst {h} = hsl;\n\treturn [\n\t\tnew TinyColor(color),\n\t\tnew TinyColor({h: (h + 120) % 360, s: hsl.s, l: hsl.l}),\n\t\tnew TinyColor({h: (h + 240) % 360, s: hsl.s, l: hsl.l}),\n\t]\n}\n/**\n * Find the color tetrad colors.\n *\n * @param      {TinyColor}   color   The color\n * @return     {[TinyColor]} An array of 4 tetrad TinyColors.\n */\nfunction tetrad(color) {\n\tconst hsl = new TinyColor(color).toHsl();\n\tconst {h} = hsl;\n\treturn [\n\t\tnew TinyColor(color),\n\t\tnew TinyColor({h: (h + 90) % 360, s: hsl.s, l: hsl.l}),\n\t\tnew TinyColor({h: (h + 180) % 360, s: hsl.s, l: hsl.l}),\n\t\tnew TinyColor({h: (h + 270) % 360, s: hsl.s, l: hsl.l}),\n\t]\n}\n/**\n * Find the split complementary colors.\n *\n * @param      {TinyColor}    color   The color\n * @return     {[TinyColor]}  An array of 3 split complementary TinyColors.\n */\nfunction splitcomplement(color) {\n\tconst hsl = new TinyColor(color).toHsl();\n\tconst {h} = hsl;\n\treturn [\n\t\tnew TinyColor(color),\n\t\tnew TinyColor({h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n\t\tnew TinyColor({h: (h + 216) % 360, s: hsl.s, l: hsl.l}),\n\t]\n}\n/**\n * Find the analogous colors.\n *\n * @param      {TinyColor}    color   The color\n * @return     {[TinyColor]}  The new analogous Tinycolors.\n */\nfunction analogous(color, results = 6, slices = 30) {\n\tconst hsl = new TinyColor(color).toHsl();\n\tconst part = 360 / slices;\n\tconst returnValue = [new TinyColor(color)];\n\tfor (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results;) {\n\t\thsl.h = (hsl.h + part) % 360;\n\t\treturnValue.push(new TinyColor(hsl));\n\t}\n\treturn returnValue\n}\n/**\n * Find the monochromatic color.\n *\n * @param      {TinyColor}    color   The color\n * @return     {TinyColor}  The new monochromatic Tinycolor.\n */\nfunction monochromatic(color, results = 6) {\n\tconst hsv = new TinyColor(color).toHsv();\n\tlet {h, s, v} = hsv;\n\tconst returnValue = [];\n\tconst modification = 1 / results;\n\twhile (results--) {\n\t\treturnValue.push(new TinyColor({h, s, v}));\n\t\tv = (v + modification) % 1;\n\t}\n\treturn returnValue\n}\n\n/**\n * Apply a modification conditionally\n * @param  {Function}  action The modification function to apply\n * @param  {arguments} args   Arguments passed to specified function\n * @return {TinyColor}        The modified color\n */\nfunction modify(action, args) {\n\tconst actions = {invert, desaturate, saturate, greyscale, lighten, brighten, darken, spin};\n\tconst color = actions[action](...args);\n\tconst [source] = args;\n\tsource._r = color._r;\n\tsource._g = color._g;\n\tsource._b = color._b;\n\tsource.setAlpha(color._a);\n\treturn source\n}\n/**\n * Invert Color\n * @param  {TinyColor} color  The color to invert\n * @return {TinyColor}        The inverted color\n */\nfunction invert(color) {\n\tconst rgb = new TinyColor(color).toRgb();\n\trgb.r = mathMax(0, mathMin(255, 255 - rgb.r));\n\trgb.g = mathMax(0, mathMin(255, 255 - rgb.g));\n\trgb.b = mathMax(0, mathMin(255, 255 - rgb.b));\n\treturn new TinyColor(rgb)\n}\n/**\n * Desaturate Color\n * @param  {TinyColor} color  The color to modify\n * @param  {Number}    amount The amount to desaturate <= 100\n * @return {TinyColor}        The modified color\n */\nfunction desaturate(color, amount) {\n\tamount = (amount === 0) ? 0 : (amount || 10);\n\tconst hsl = new TinyColor(color).toHsl();\n\thsl.s -= amount / 100;\n\thsl.s = clamp01(hsl.s);\n\treturn new TinyColor(hsl)\n}\n/**\n * Saturate color\n * @param  {TinyColor} color  The color to modify\n * @param  {Number}    amount The amount to saturate <= 100\n * @return {TinyColor}        The modified color\n */\nfunction saturate(color, amount) {\n\tamount = (amount === 0) ? 0 : (amount || 10);\n\tconst hsl = new TinyColor(color).toHsl();\n\thsl.s += amount / 100;\n\thsl.s = clamp01(hsl.s);\n\treturn new TinyColor(hsl)\n}\n/**\n * Remove all chroma, leaving luminence\n * @param  {TinyColor} color The color to modify\n * @return {TinyColor}       The modified color\n */\nfunction greyscale(color) {\n\treturn new TinyColor(color).desaturate(100)\n}\n/**\n * Lighten a color\n * @param  {TinyColor} color  The color to modify\n * @param  {Number}    amount The amount to ligten by <= 100\n * @return {TinyColor}        The modified color\n */\nfunction lighten(color, amount) {\n\tamount = (amount === 0) ? 0 : (amount || 10);\n\tconst hsl = new TinyColor(color).toHsl();\n\thsl.l += amount / 100;\n\thsl.l = clamp01(hsl.l);\n\treturn new TinyColor(hsl)\n}\n/**\n * Brighten a color\n * @param  {TinyColor} color  The color to modify\n * @param  {Number}    amount The amount to brighten by <= 100\n * @return {TinyColor}        The modified color\n */\nfunction brighten(color, amount) {\n\tamount = (amount === 0) ? 0 : (amount || 10);\n\tconst rgb = new TinyColor(color).toRgb();\n\trgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));\n\trgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));\n\trgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));\n\treturn new TinyColor(rgb)\n}\n/**\n * Darken a color\n * @param  {TinyColor} color  The color to modify\n * @param  {Number}    amount The amount to brighten by <= 100\n * @return {TinyColor}        The modified color\n */\nfunction darken(color, amount) {\n\tamount = (amount === 0) ? 0 : (amount || 10);\n\tconst hsl = new TinyColor(color).toHsl();\n\thsl.l -= amount / 100;\n\thsl.l = clamp01(hsl.l);\n\treturn new TinyColor(hsl)\n}\n/**\n * Spin takes a positive or negative amount within [-360, 360] indicating the\n * change of hue. Values outside of this range will be wrapped into this range.\n * @param  {TinyColor} color  The color to modify\n * @param  {Number}    amount Degrees to rotate hue by\n * @return {TinyColor}        The modified color\n */\nfunction spin(color, amount) {\n\tconst hsl = new TinyColor(color).toHsl();\n\tconst hue = (hsl.h + amount) % 360;\n\thsl.h = hue < 0 ? 360 + hue : hue;\n\treturn new TinyColor(hsl)\n}\n\nclass TinyColorExtension {\n\tconstructor(api, id, options = {}) {\n\t\tthis.api = api;\n\t\tthis.id = id;\n\t\tthis.options = options;\n\t}\n\tuse(specified) {\n\t\tthis.wanted = specified;\n\t\treturn this\n\t}\n\tparse(input) {\n\t\tconst result = this.api.findColor(input);\n\t\treturn {\n\t\t\tas: format => Object.assign(result, {format}),\n\t\t\trgba: {\n\t\t\t\tr: result.r,\n\t\t\t\tg: result.g,\n\t\t\t\tb: result.b,\n\t\t\t\ta: result.a,\n\t\t\t},\n\t\t\tvalueOf: () => result,\n\t\t}\n\t}\n\tprint(id, rgba) {\n\t\treturn this.api.print(rgba, id)\n\t}\n\tcomplete(rgba) {\n\t\tconst output = this.toString(rgba);\n\t\tdelete this.wanted;\n\t\treturn output\n\t}\n}\n\nconst _template = {\n\tformat: false,\n\tok: false,\n\tr: 0,\n\tg: 0,\n\tb: 0,\n\ta: 1,\n};\nclass TinyColorExtensionAPI {\n\tconstructor() {\n\t\tthis.colorspaces = {};\n\t\tthis.options = {\n\t\t\talphaFormat: 'rgb',\n\t\t\tshortHex: false,\n\t\t\tupperCaseHex: false,\n\t\t};\n\t}\n\tset(options) {\n\t\tObject.assign(this.options, options);\n\t\tfor (const id in this.colorspaces) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(this.colorspaces, id)) {\n\t\t\t\tObject.assign(this.colorspaces[id].options, options);\n\t\t\t}\n\t\t}\n\t}\n\tadd(id, options) {\n\t\tthis.colorspaces[id] = new TinyColorExtension(this, id, {...this.options, ...options});\n\t\tif (options.alias) {\n\t\t\tfor (const id_ of options.alias) {\n\t\t\t\tthis.colorspaces[id_] = this.colorspaces[id];\n\t\t\t}\n\t\t}\n\t\treturn this.colorspaces[id]\n\t}\n\tfindColor(input) {\n\t\tconst color = {..._template};\n\t\tinput = typeof input === 'string' ? input.trim().toLowerCase() : input;\n\t\tif (input) {\n\t\t\tfor (const id in this.colorspaces) {\n\t\t\t\tif (this.colorspaces[id].shouldHandleInput(input)) {\n\t\t\t\t\tObject.assign(color, this.colorspaces[id].toRgb(input));\n\t\t\t\t\tcolor.format = color.format || id;\n\t\t\t\t\tcolor.ok = true;\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn color\n\t}\n\traw(rgba, format) {\n\t\tif (format in this.colorspaces) {\n\t\t\treturn this.colorspaces[format].toRaw(rgba)\n\t\t}\n\t\treturn {r: rgba.r / 255, g: rgba.g / 255, b: rgba.b / 255, a: rgba.a}\n\t}\n\tprint(rgba, original, format) {\n\t\tconst specified = format;\n\t\tformat = format || original;\n\t\tif (format in this.colorspaces) {\n\t\t\treturn this.colorspaces[format].use(specified).complete(rgba)\n\t\t}\n\t\treturn `[${rgba.r}, ${rgba.g}, ${rgba.b}, ${rgba.a * 255}]`\n\t}\n}\n\nlet tinyCounter = 0;\nconst extensionApi = new TinyColorExtensionAPI();\nclass TinyColor {\n\t/**\n\t * Create a new TinyColor instance\n\t * @param  {string|array|object} color Notation describing a color\n\t * @param  {object} options            Options object (see below)\n\t * @return {TinyColor}                 An instance representing the color\n\t */\n\tconstructor(color, options = {}) {\n\t\tcolor = color || '';\n\t\tif (color instanceof TinyColor) {\n\t\t\treturn color\n\t\t}\n\t\tconst rgba = extensionApi.findColor(color);\n\t\tthis._originalInput = color;\n\t\tthis._r = roundIf01(rgba.r);\n\t\tthis._g = roundIf01(rgba.g);\n\t\tthis._b = roundIf01(rgba.b);\n\t\tthis._a = rgba.a;\n\t\tthis._roundA = roundAlpha(this._a);\n\t\tthis._format = options.format || rgba.format;\n\t\tthis._gradientType = options.gradientType;\n\t\tthis._ok = rgba.ok;\n\t\tthis._tc_id = TinyColor.newId();\n\t\textensionApi.set(options);\n\t}\n\t/**\n\t * Create a new ID\n\t *\n\t * @return     {number}  Incremented ID counter\n\t */\n\tstatic newId() {\n\t\treturn tinyCounter++\n\t}\n\t/**\n\t * Register a TinyColor extension\n\t * @param   {string}  id                   The plugin identifier\n\t * @param   {object}  [options={}]         Plugin options\n\t * @param   {string}  options.alphaFormat  rgb|hex\n\t * @param   {boolean} options.shortHex     Short hex codes #ABC, if possible\n\t * @param   {boolean} options.upperCaseHex User UPPER case hex\n\t * @return  {TinyColorExtension}           The TinyColor extension\n\t */\n\tstatic registerFormat(id, options = {}) {\n\t\treturn extensionApi.add(id, options)\n\t}\n\t/**\n\t * Are two TinyColor colours equivalent?\n\t *\n\t * @param      {TinyColor}  color1  The first color\n\t * @param      {TinyColor}  color2  The second color\n\t * @return     {boolean}  Equivalent or not?\n\t */\n\tstatic equals(color1, color2) {\n\t\tif (!color1 || !color2) {\n\t\t\treturn false\n\t\t}\n\t\treturn new TinyColor(color1).toRgbString() === new TinyColor(color2).toRgbString()\n\t}\n\t/**\n\t * Create a new TinyColor from values from 0..1\n\t *\n\t * @param      {object}     color    The color\n\t * @param      {object}     options  The options\n\t * @return     {TinyColor}  The tiny color.\n\t */\n\tstatic fromRatio(color, options) {\n\t\tif (typeof color === 'object') {\n\t\t\tconst newColor = {};\n\t\t\tfor (const i in color) {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(color, i)) {\n\t\t\t\t\tif (i === 'a') {\n\t\t\t\t\t\tnewColor[i] = color[i];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewColor[i] = convertToPercentage(color[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcolor = newColor;\n\t\t}\n\t\treturn new TinyColor(color, options)\n\t}\n\t/**\n\t * Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\n\t *\n\t * @param      {TinyColor}  color1  The first color\n\t * @param      {TinyColor}  color2  The second color\n\t * @return     {number}             The color contrast defined by (WCAG Version 2)\n\t */\n\tstatic readability(color1, color2) {\n\t\treturn readability(color1, color2)\n\t}\n\t/**\n\t * Ensure that foreground and background color combinations meet WCAG2 guidelines.\n\t *\n\t * @param   {TinyColor}        color1        The first color\n\t * @param   {TinyColor}        color2        The second color\n\t * @param   {object}           wcag2         The WCAG2 properties to test\n\t * @param   {object}           wcag2.level   The level to test \"AA\" or \"AAA\" (default \"AA\")\n\t * @param   {object}           wcag2.size    The content size to test \"large\" or \"small\" (default \"small\")\n\t * @example Tinycolor.isReadable(\"#000\", \"#111\") → false\n\t * @example Tinycolor.isReadable(\"#000\", \"#111\", {level:\"AA\",size:\"large\"}) → false\n\t * @return  {(boolean|number)} True if readable, False otherwise.\n\t */\n\tstatic isReadable(color1, color2, wcag2) {\n\t\treturn isReadable(color1, color2, wcag2)\n\t}\n\t/**\n\t * Given a base color and a list of possible foreground or background colors for that\n\t * base, returns the most readable color.\n\t *\n\t * Optionally returns Black or White if the most readable color is unreadable.\n\t *\n\t * @param   {TinyColor}    baseColor                     The base color\n\t * @param   {[TinyColor]}  colorList                     An array of TinyColors\n\t * @param   {object}       [args={}]                     The arguments\n\t * @param   {boolean}      args.includeFallbackColors    Include fallback colors?\n\t * @param   {object}       args.level                    The level to test \"AA\" or \"AAA\" (default \"AA\")\n\t * @param   {object}       args.size                     The content size to test \"large\" or \"small\" (default \"small\")\n\t * @example Tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"], {includeFallbackColors:false}).toHexString(); // \"#112255\"\n\t * @example Tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"], {includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n\t * @example Tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"], {includeFallbackColors:true, level:\"AAA\", size:\"large\"}).toHexString(); // \"#faf3f3\"\n\t * @example Tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"], {includeFallbackColors:true, level:\"AAA\", size:\"small\"}).toHexString(); // \"#ffffff\"\n\t * @return  {TinyColor}    A TinyColor instance of the msot readable color.\n\t */\n\tstatic mostReadable(baseColor, colorList, args) {\n\t\treturn mostReadable(baseColor, colorList, args)\n\t}\n\t/**\n\t * Mix a second colour into the first\n\t *\n\t * @param  {TinyColor}  color1  The first color\n\t * @param  {TinyColor}  color2  The second color\n\t * @param  {number}     amount  The mix amount of the second color\n\t * @return {TinyColor}\t\t\t   A new, mixed TinyColor instance\n\t */\n\tstatic mix(color1, color2, amount) {\n\t\treturn calcMix(color1, color2, amount)\n\t}\n\t/**\n\t * Determines if dark.\n\t *\n\t * @return     {boolean}  True if dark, False otherwise.\n\t */\n\tisDark() {\n\t\treturn this.getBrightness() < 128\n\t}\n\t/**\n\t * Determines if light.\n\t *\n\t * @return     {boolean}  True if light, False otherwise.\n\t */\n\tisLight() {\n\t\treturn !this.isDark()\n\t}\n\t/**\n\t * Determines if valid.\n\t *\n\t * @return     {boolean}  True if valid, False otherwise.\n\t */\n\tisValid() {\n\t\treturn this._ok\n\t}\n\t/**\n\t * Gets the original input.\n\t *\n\t * @return     {string|object}  The original input.\n\t */\n\tgetOriginalInput() {\n\t\treturn this._originalInput\n\t}\n\t/**\n\t * Gets the format.\n\t *\n\t * @return     {string}  The format.\n\t */\n\tgetFormat() {\n\t\treturn this._format\n\t}\n\t/**\n\t * Gets the alpha.\n\t *\n\t * @return     {number}  The alpha.\n\t */\n\tgetAlpha() {\n\t\treturn this._a\n\t}\n\t/**\n\t * Gets the brightness.\n\t *\n\t * @return     {number}  The brightness.\n\t */\n\tgetBrightness() {\n\t\treturn calcBrightness(this.toRgb())\n\t}\n\t/**\n\t * Gets the luminance.\n\t *\n\t * @return     {number}  The luminance.\n\t */\n\tgetLuminance() {\n\t\treturn calcLuminance(rawToDeepRgba(this))\n\t}\n\t/**\n\t * Return the current color as a string.\n\t *\n\t * @param      {string}  format  The color format\n\t * @return     {string}  The current color, as a string.\n\t */\n\ttoString(format) {\n\t\treturn extensionApi.print(rawToRgba(this), this._format, format)\n\t}\n\t/**\n\t * Returns a name representation of the object.\n\t *\n\t * @return     {string}  The name of the colour.\n\t */\n\ttoName() {\n\t\treturn extensionApi.print(rawToRgba(this), 'name', 'toName')\n\t}\n\t/**\n\t * Returns a rgb representation of the object.\n\t *\n\t * @return     {object}  Rgb representation of the object.\n\t */\n\ttoRgb() {\n\t\treturn rawToDeepRgba(this)\n\t}\n\t/**\n\t * Returns a rgb string representation of the object.\n\t *\n\t * @return     {string}  Rgb string representation of the object.\n\t */\n\ttoRgbString() {\n\t\treturn rgbaToString(rawToRgba(this))\n\t}\n\t/**\n\t * Returns a rgb array representation of the object.\n\t *\n\t * @return     {[number]}  Rgb array representation of the object.\n\t */\n\ttoRgbArray() {\n\t\treturn rgbaToArray(rawToRgba(this))\n\t}\n\t/**\n\t * Returns a percentage rgb representation of the object.\n\t *\n\t * @return     {object}  Percentage rgb representation of the object.\n\t */\n\ttoPercentageRgb() {\n\t\treturn rgbaToPercentageRgba(rawToDeepRgba(this))\n\t}\n\t/**\n\t * Returns a percentage rgb string representation of the object.\n\t *\n\t * @return     {string}  Percentage rgb string representation of the object.\n\t */\n\ttoPercentageRgbString() {\n\t\treturn rgbaToString(rgbaToPercentageRgba(rawToRgba(this)))\n\t}\n\t/**\n\t * Return the hex string of a color, as pure hexadecimal.\n\t *\n\t * @param      {boolean}  allow3Char  Allow 3 digit RGB strings\n\t * @return     {string}  The Hex string of the color.\n\t */\n\ttoHex(allow3Char) {\n\t\treturn rgbToHex(rawToRgba(this), allow3Char)\n\t}\n\t/**\n\t * Return the hex string of a color, with a leading #\n\t *\n\t * @param      {boolean}  allow3Char  Allow 3 digit RGB strings\n\t * @return     {string}  The Hex string of the color.\n\t */\n\ttoHexString(allow3Char) {\n\t\treturn `#${this.toHex(allow3Char)}`\n\t}\n\t/**\n\t * Return the hex string of a color with aplha, as pure hexadecimal.\n\t *\n\t * @param      {boolean}  allow4Char  Allow 4 digit RGBA strings\n\t * @return     {string}  The Hex string of the color.\n\t */\n\ttoHex8(allow4Char) {\n\t\treturn rgbaToHex(rawToRgba(this), allow4Char)\n\t}\n\t/**\n\t * Return the hex string of a color with aplha, with a leading #\n\t *\n\t * @param      {boolean}  allow3Char  Allow 4 digit RGBA strings\n\t * @return     {string}  The Hex string of the color.\n\t */\n\ttoHex8String(allow4Char) {\n\t\treturn `#${this.toHex8(allow4Char)}`\n\t}\n\t/**\n\t * Returns a HSV object representation of the object.\n\t *\n\t * @return     {object}  HSV(A) representation of the color.\n\t */\n\ttoHsv() {\n\t\treturn extensionApi.raw(rawToDeepRgba(this), 'hsv')\n\t}\n\t/**\n\t * Returns a HSV string representation of the object.\n\t *\n\t * @return     {string}  hsv(h, s, v[, a]) representation of the color.\n\t */\n\ttoHsvString() {\n\t\treturn extensionApi.print(rawToDeepRgba(this), this._format, 'hsv')\n\t}\n\t/**\n\t * Returns a HSL object representation of the object.\n\t *\n\t * @return     {object}  HSL(A) representation of the color.\n\t */\n\ttoHsl() {\n\t\treturn extensionApi.raw(rawToDeepRgba(this), 'hsl')\n\t}\n\t/**\n\t * Returns a HSL string representation of the object.\n\t *\n\t * @return     {string}  hsl(h, s, l[, a]) representation of the color.\n\t */\n\ttoHslString() {\n\t\treturn extensionApi.print(rawToDeepRgba(this), this._format, 'hsl')\n\t}\n\t/**\n\t * Sets the alpha.\n\t *\n\t * @param      {number}  value   The alpha value (0 - 1.0)\n\t * @return     {TinyColor}  The current colour with the set alpha.\n\t */\n\tsetAlpha(value) {\n\t\tthis._a = boundAlpha(value);\n\t\tthis._roundA = mathRound(100 * this._a) / 100;\n\t\treturn this\n\t}\n\t/**\n\t * Creates a new instance of the object with same properties than original.\n\t *\n\t * @return     {TinyColor}  Copy of this object.\n\t */\n\tclone() {\n\t\treturn new TinyColor(this.toString())\n\t}\n\tlighten(...args) {\n\t\treturn modify('lighten', [this, ...args])\n\t}\n\tbrighten(...args) {\n\t\treturn modify('brighten', [this, ...args])\n\t}\n\tdarken(...args) {\n\t\treturn modify('darken', [this, ...args])\n\t}\n\tdesaturate(...args) {\n\t\treturn modify('desaturate', [this, ...args])\n\t}\n\tsaturate(...args) {\n\t\treturn modify('saturate', [this, ...args])\n\t}\n\tgreyscale(...args) {\n\t\treturn modify('greyscale', [this, ...args])\n\t}\n\tinvert(...args) {\n\t\treturn modify('invert', [this, ...args])\n\t}\n\tspin(...args) {\n\t\treturn modify('spin', [this, ...args])\n\t}\n\tanalogous(...args) {\n\t\treturn combine('analogous', [this, ...args])\n\t}\n\tcomplement(...args) {\n\t\treturn combine('complement', [this, ...args])\n\t}\n\tmonochromatic(...args) {\n\t\treturn combine('monochromatic', [this, ...args])\n\t}\n\tsplitcomplement(...args) {\n\t\treturn combine('splitcomplement', [this, ...args])\n\t}\n\ttriad(...args) {\n\t\treturn combine('triad', [this, ...args])\n\t}\n\ttetrad(...args) {\n\t\treturn combine('tetrad', [this, ...args])\n\t}\n}\n\nconst matchers$4 = (function () {\n\treturn {\n\t\trgb: new RegExp(`rgb${PERMISSIVE_MATCH3}`),\n\t\trgba: new RegExp(`rgba${PERMISSIVE_MATCH4}`),\n\t}\n})();\n/**\n * Permissive string parsing.  Take in a number of formats, and output an object\n * based on detected format.\n *\n * Try to match string input using regular expressions. Keep most of the number\n * bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n * Just return an object and let the conversion functions handle that.\n * This way the result will be the same whether the tinycolor is initialized\n * with string or object.\n *\n * @param      {string}  color   The color\n * @return     {object}  Returns `{ r, g, b }` or `{ r, g, b, a }`\n */\nfunction rgbStringToObject(color) {\n\tlet r, g, b, a, match;\n\tif ((match = matchers$4.rgb.exec(color))) {\n\t\t[r, g, b] = match.splice(1, 3);\n\t\treturn {r, g, b}\n\t}\n\tif ((match = matchers$4.rgba.exec(color))) {\n\t\t[r, g, b, a] = match.splice(1, 4);\n\t\treturn {r, g, b, a}\n\t}\n\treturn false\n}\n\nconst api$6 = TinyColor.registerFormat('rgb');\napi$6.shouldHandleInput = input =>\n\t(typeof input === 'object' && isValidCSSUnitRGB(input) && !isPercentage(input.r))\n\t|| rgbStringToObject(input);\napi$6.toRgb = input =>\n\t(typeof input === 'object' && conformRgba(input))\n\t|| conformRgba(rgbStringToObject(input));\napi$6.toRaw = rgba => rgba;\napi$6.toString = rgba => rgbaToString(rgba);\n\nconst api$5 = TinyColor.registerFormat('prgb');\napi$5.shouldHandleInput = input => {\n\tif (typeof input === 'string') {\n\t\tconst rgbCheck = rgbStringToObject(input);\n\t\treturn rgbCheck && isPercentage(rgbCheck.r)\n\t}\n\treturn isValidCSSUnitRGB(input) && isPercentage(input.r)\n};\napi$5.toRgb = input => typeof input === 'object' ? conformRgba(input) : conformRgba(rgbStringToObject(input));\napi$5.toRaw = rgba => rgbaToPercentageRgba(rgba);\napi$5.toString = rgba => rgbaToString(rgbaToPercentageRgba(rgba));\n\nconst api$4 = TinyColor.registerFormat('hex', {\n\talias: ['hex3', 'hex6'],\n});\nconst matchers$3 = (function () {\n\treturn {\n\t\thex3: /^#?([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])$/,\n\t\thex6: /^#?([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})$/,\n\t}\n})();\nfunction hexToRgba$1(color) {\n\tlet match;\n\tif ((match = matchers$3.hex3.exec(color))) {\n\t\tconst [r, g, b] = match.splice(1, 3).map(h => `${h}${h}`).map(value => convertHexToInt(value));\n\t\treturn {r, g, b, a: 1}\n\t}\n\tif ((match = matchers$3.hex6.exec(color))) {\n\t\tconst [r, g, b] = match.splice(1, 3).map(value => convertHexToInt(value));\n\t\treturn {r, g, b, a: 1}\n\t}\n\treturn false\n}\nconst hexToString$1 = (rgba, short = api$4.options.shortHex) => `#${api$4.options.upperCaseHex\n\t? rgbToHex(rgba, short).toUpperCase()\n\t: rgbToHex(rgba, short)}`;\napi$4.shouldHandleInput = input => matchers$3.hex6.test(input) || matchers$3.hex3.test(input);\napi$4.toRgb = input => hexToRgba$1(input);\napi$4.toRaw = rgba => rgba;\napi$4.toString = rgba => {\n\tif (/^hex6?$/.test(api$4.wanted)) {\n\t\treturn hexToString$1(rgba)\n\t}\n\tif (api$4.wanted === 'hex3') {\n\t\treturn hexToString$1(rgba, true)\n\t}\n\tif (hasAlpha(rgba)) {\n\t\treturn api$4.options.alphaFormat === 'hex'\n\t\t\t? hexToString$1(rgba) : api$4.print(api$4.options.alphaFormat, rgba)\n\t}\n\treturn hexToString$1(rgba)\n};\n\nconst api$3 = TinyColor.registerFormat('hex8', {\n\talias: ['hex4'],\n});\nconst matchers$2 = (function () {\n\treturn {\n\t\thex4: /^#?([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])$/,\n\t\thex8: /^#?([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})$/,\n\t}\n})();\nfunction hexToRgba(color) {\n\tlet match;\n\tif ((match = matchers$2.hex4.exec(color))) {\n\t\tconst a = convertHexToDecimal(`${match[4]}${match[4]}`);\n\t\tconst [r, g, b] = match.splice(1, 3).map(h => `${h}${h}`).map(value => convertHexToInt(value));\n\t\treturn {r, g, b, a}\n\t}\n\tif ((match = matchers$2.hex8.exec(color))) {\n\t\tconst a = convertHexToDecimal(match[4]);\n\t\tconst [r, g, b] = match.splice(1, 3).map(value => convertHexToInt(value));\n\t\treturn {r, g, b, a}\n\t}\n\treturn false\n}\nconst hexToString = (rgba, short = api$3.options.shortHex) => `#${api$3.options.upperCaseHex\n\t? rgbaToHex(rgba, short).toUpperCase()\n\t: rgbaToHex(rgba, short)}`;\napi$3.shouldHandleInput = input => matchers$2.hex8.test(input) || matchers$2.hex4.test(input);\napi$3.toRgb = input => hexToRgba(input);\napi$3.toRaw = rgba => rgba;\napi$3.toString = rgba => {\n\tif (api$3.wanted === 'hex4') {\n\t\treturn hexToString(rgba, true)\n\t}\n\tif (api$3.wanted === 'hex8') {\n\t\treturn hexToString(rgba)\n\t}\n\tif (hasAlpha(rgba)) {\n\t\treturn api$3.options.alphaFormat === 'hex'\n\t\t\t? hexToString(rgba) : api$3.print(api$3.options.alphaFormat, rgba)\n\t}\n\treturn hexToString(rgba)\n};\n\nconst api$2 = TinyColor.registerFormat('hsl');\nconst matchers$1 = (function () {\n\treturn {\n\t\thsl: new RegExp(`hsl${PERMISSIVE_MATCH3}`),\n\t\thsla: new RegExp(`hsla${PERMISSIVE_MATCH4}`),\n\t}\n})();\nconst isValidCSSUnitHSL = hsl => isValidCSSUnit(hsl.h) && isValidCSSUnit(hsl.s) && isValidCSSUnit(hsl.l);\nfunction rgbaToHsla(rgba) {\n\tconst r = bound01(rgba.r, 255);\n\tconst g = bound01(rgba.g, 255);\n\tconst b = bound01(rgba.b, 255);\n\tconst a = rgba.a || 1;\n\tconst max = mathMax(r, g, b);\n\tconst min = mathMin(r, g, b);\n\tlet h, s;\n\tconst l = (max + min) / 2;\n\tif (max === min) {\n\t\th = 0;\n\t\ts = 0;\n\t} else {\n\t\tconst d = max - min;\n\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t\tswitch (max) {\n\t\t\tcase r:\n\t\t\t\th = ((g - b) / d) + (g < b ? 6 : 0);\n\t\t\t\tbreak\n\t\t\tcase g:\n\t\t\t\th = ((b - r) / d) + 2;\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\th = ((r - g) / d) + 4;\n\t\t\t\tbreak\n\t\t}\n\t\th /= 6;\n\t}\n\treturn {h, s, l, a}\n}\nfunction hslaToRgba(hsla) {\n\tconst h = bound01(hsla.h, 360);\n\tconst s = bound01(convertToPercentage(hsla.s), 100);\n\tconst l = bound01(convertToPercentage(hsla.l), 100);\n\tconst a = hsla.a || 1;\n\tlet r, g, b;\n\tfunction hue2rgb(p, q, t) {\n\t\tt = (t < 0) ? t + 1 : t;\n\t\tt = (t > 1) ? t - 1 : t;\n\t\tif (t < 1 / 6) {\n\t\t\treturn p + ((q - p) * 6 * t)\n\t\t}\n\t\tif (t < 1 / 2) {\n\t\t\treturn q\n\t\t}\n\t\tif (t < 2 / 3) {\n\t\t\treturn p + ((q - p) * ((2 / 3) - t) * 6)\n\t\t}\n\t\treturn p\n\t}\n\tif (s === 0) {\n\t\tr = l;\n\t\tg = l;\n\t\tb = l;\n\t} else {\n\t\tconst q = l < 0.5 ? l * (1 + s) : l + s - (l * s);\n\t\tconst p = (2 * l) - q;\n\t\tr = hue2rgb(p, q, h + (1 / 3));\n\t\tg = hue2rgb(p, q, h);\n\t\tb = hue2rgb(p, q, h - (1 / 3));\n\t}\n\treturn {r: r * 255, g: g * 255, b: b * 255, a}\n}\nfunction hslStringToObject(color) {\n\tlet h, s, l, a, match;\n\tif ((match = matchers$1.hsl.exec(color))) {\n\t\t[h, s, l] = match.splice(1, 3);\n\t\treturn {h, s, l}\n\t}\n\tif ((match = matchers$1.hsla.exec(color))) {\n\t\t[h, s, l, a] = match.splice(1, 4);\n\t\treturn {h, s, l, a}\n\t}\n\treturn false\n}\nfunction hslaToString(hsla) {\n\tlet {h, s, l, a} = hsla;\n\th = mathRound(h * 360);\n\ts = mathRound(s * 100);\n\tl = mathRound(l * 100);\n\treturn (a === 1)\n\t\t? `hsl(${h}, ${s}%, ${l}%)`\n\t\t: `hsla(${h}, ${s}%, ${l}%, ${a})`\n}\nfunction hslaToRaw(hsla) {\n\tlet {h, s, l, a} = hsla;\n\th *= 360;\n\treturn {h, s, l, a}\n}\napi$2.shouldHandleInput = input => (typeof input === 'object' && isValidCSSUnitHSL(input)) || hslStringToObject(input);\napi$2.toRgb = input => (typeof input === 'object' && hslaToRgba(input)) || hslaToRgba(hslStringToObject(input));\napi$2.toRaw = rgba => hslaToRaw(rgbaToHsla(rgba));\napi$2.toString = rgba => hslaToString(rgbaToHsla(rgba));\n\nconst api$1 = TinyColor.registerFormat('hsv');\nconst matchers = (function () {\n\treturn {\n\t\thsv: new RegExp(`hsv${PERMISSIVE_MATCH3}`),\n\t\thsva: new RegExp(`hsva${PERMISSIVE_MATCH4}`),\n\t}\n})();\nconst isValidCSSUnitHSV = hsv => isValidCSSUnit(hsv.h) && isValidCSSUnit(hsv.s) && isValidCSSUnit(hsv.v);\nfunction rgbaToHsva(rgba) {\n\tconst r = bound01(rgba.r, 255);\n\tconst g = bound01(rgba.g, 255);\n\tconst b = bound01(rgba.b, 255);\n\tconst a = rgba.a || 1;\n\tconst max = mathMax(r, g, b);\n\tconst min = mathMin(r, g, b);\n\tconst d = max - min;\n\tlet h;\n\tconst s = max === 0 ? 0 : d / max;\n\tconst v = max;\n\tif (max === min) {\n\t\th = 0;\n\t} else {\n\t\tswitch (max) {\n\t\t\tcase r:\n\t\t\t\th = ((g - b) / d) + (g < b ? 6 : 0);\n\t\t\t\tbreak\n\t\t\tcase g:\n\t\t\t\th = ((b - r) / d) + 2;\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\th = ((r - g) / d) + 4;\n\t\t\t\tbreak\n\t\t}\n\t\th /= 6;\n\t}\n\treturn {h, s, v, a}\n}\nfunction hsvaToRgba(hsva) {\n\tconst h = bound01(hsva.h, 360) * 6;\n\tconst s = bound01(convertToPercentage(hsva.s), 100);\n\tconst v = bound01(convertToPercentage(hsva.v), 100);\n\tconst a = hsva.a || 1;\n\tconst i = Math.floor(h);\n\tconst f = h - i;\n\tconst p = v * (1 - s);\n\tconst q = v * (1 - (f * s));\n\tconst t = v * (1 - ((1 - f) * s));\n\tconst mod = i % 6;\n\tconst r = [v, q, p, p, t, v][mod];\n\tconst g = [t, v, v, q, p, p][mod];\n\tconst b = [p, p, t, v, v, q][mod];\n\treturn {r: r * 255, g: g * 255, b: b * 255, a}\n}\nfunction hsvStringToObject(color) {\n\tlet h, s, v, a, match;\n\tif ((match = matchers.hsv.exec(color))) {\n\t\t[h, s, v] = match.splice(1, 3);\n\t\treturn {h, s, v}\n\t}\n\tif ((match = matchers.hsva.exec(color))) {\n\t\t[h, s, v, a] = match.splice(1, 4);\n\t\treturn {h, s, v, a}\n\t}\n\treturn false\n}\nfunction hsvaToString(hsva) {\n\tlet {h, s, v, a} = hsva;\n\th = mathRound(h * 360);\n\ts = mathRound(s * 100);\n\tv = mathRound(v * 100);\n\treturn (a === 1)\n\t\t? `hsv(${h}, ${s}%, ${v}%)`\n\t\t: `hsva(${h}, ${s}%, ${v}%, ${a})`\n}\nfunction hsvaToRaw(hsla) {\n\tlet {h, s, v, a} = hsla;\n\th *= 360;\n\treturn {h, s, v, a}\n}\napi$1.shouldHandleInput = input => (typeof input === 'object' && isValidCSSUnitHSV(input)) || hsvStringToObject(input);\napi$1.toRgb = input => (typeof input === 'object' && hsvaToRgba(input)) || hsvaToRgba(hsvStringToObject(input));\napi$1.toRaw = rgba => hsvaToRaw(rgbaToHsva(rgba));\napi$1.toString = rgba => hsvaToString(rgbaToHsva(rgba));\n\nconst api = TinyColor.registerFormat('name', {\n\talias: ['toName'],\n});\nfunction flip(o) {\n\tconst flipped = {};\n\tfor (const i in o) {\n\t\tif (Object.prototype.hasOwnProperty.call(o, i)) {\n\t\t\tflipped[o[i]] = i;\n\t\t}\n\t}\n\treturn flipped\n}\nconst names = {\n\taliceblue: 'f0f8ff',\n\tantiquewhite: 'faebd7',\n\taqua: '0ff',\n\taquamarine: '7fffd4',\n\tazure: 'f0ffff',\n\tbeige: 'f5f5dc',\n\tbisque: 'ffe4c4',\n\tblack: '000',\n\tblanchedalmond: 'ffebcd',\n\tblue: '00f',\n\tblueviolet: '8a2be2',\n\tbrown: 'a52a2a',\n\tburlywood: 'deb887',\n\tburntsienna: 'ea7e5d',\n\tcadetblue: '5f9ea0',\n\tchartreuse: '7fff00',\n\tchocolate: 'd2691e',\n\tcoral: 'ff7f50',\n\tcornflowerblue: '6495ed',\n\tcornsilk: 'fff8dc',\n\tcrimson: 'dc143c',\n\tcyan: '0ff',\n\tdarkblue: '00008b',\n\tdarkcyan: '008b8b',\n\tdarkgoldenrod: 'b8860b',\n\tdarkgray: 'a9a9a9',\n\tdarkgreen: '006400',\n\tdarkgrey: 'a9a9a9',\n\tdarkkhaki: 'bdb76b',\n\tdarkmagenta: '8b008b',\n\tdarkolivegreen: '556b2f',\n\tdarkorange: 'ff8c00',\n\tdarkorchid: '9932cc',\n\tdarkred: '8b0000',\n\tdarksalmon: 'e9967a',\n\tdarkseagreen: '8fbc8f',\n\tdarkslateblue: '483d8b',\n\tdarkslategray: '2f4f4f',\n\tdarkslategrey: '2f4f4f',\n\tdarkturquoise: '00ced1',\n\tdarkviolet: '9400d3',\n\tdeeppink: 'ff1493',\n\tdeepskyblue: '00bfff',\n\tdimgray: '696969',\n\tdimgrey: '696969',\n\tdodgerblue: '1e90ff',\n\tfirebrick: 'b22222',\n\tfloralwhite: 'fffaf0',\n\tforestgreen: '228b22',\n\tfuchsia: 'f0f',\n\tgainsboro: 'dcdcdc',\n\tghostwhite: 'f8f8ff',\n\tgold: 'ffd700',\n\tgoldenrod: 'daa520',\n\tgray: '808080',\n\tgreen: '008000',\n\tgreenyellow: 'adff2f',\n\tgrey: '808080',\n\thoneydew: 'f0fff0',\n\thotpink: 'ff69b4',\n\tindianred: 'cd5c5c',\n\tindigo: '4b0082',\n\tivory: 'fffff0',\n\tkhaki: 'f0e68c',\n\tlavender: 'e6e6fa',\n\tlavenderblush: 'fff0f5',\n\tlawngreen: '7cfc00',\n\tlemonchiffon: 'fffacd',\n\tlightblue: 'add8e6',\n\tlightcoral: 'f08080',\n\tlightcyan: 'e0ffff',\n\tlightgoldenrodyellow: 'fafad2',\n\tlightgray: 'd3d3d3',\n\tlightgreen: '90ee90',\n\tlightgrey: 'd3d3d3',\n\tlightpink: 'ffb6c1',\n\tlightsalmon: 'ffa07a',\n\tlightseagreen: '20b2aa',\n\tlightskyblue: '87cefa',\n\tlightslategray: '789',\n\tlightslategrey: '789',\n\tlightsteelblue: 'b0c4de',\n\tlightyellow: 'ffffe0',\n\tlime: '0f0',\n\tlimegreen: '32cd32',\n\tlinen: 'faf0e6',\n\tmagenta: 'f0f',\n\tmaroon: '800000',\n\tmediumaquamarine: '66cdaa',\n\tmediumblue: '0000cd',\n\tmediumorchid: 'ba55d3',\n\tmediumpurple: '9370db',\n\tmediumseagreen: '3cb371',\n\tmediumslateblue: '7b68ee',\n\tmediumspringgreen: '00fa9a',\n\tmediumturquoise: '48d1cc',\n\tmediumvioletred: 'c71585',\n\tmidnightblue: '191970',\n\tmintcream: 'f5fffa',\n\tmistyrose: 'ffe4e1',\n\tmoccasin: 'ffe4b5',\n\tnavajowhite: 'ffdead',\n\tnavy: '000080',\n\toldlace: 'fdf5e6',\n\tolive: '808000',\n\tolivedrab: '6b8e23',\n\torange: 'ffa500',\n\torangered: 'ff4500',\n\torchid: 'da70d6',\n\tpalegoldenrod: 'eee8aa',\n\tpalegreen: '98fb98',\n\tpaleturquoise: 'afeeee',\n\tpalevioletred: 'db7093',\n\tpapayawhip: 'ffefd5',\n\tpeachpuff: 'ffdab9',\n\tperu: 'cd853f',\n\tpink: 'ffc0cb',\n\tplum: 'dda0dd',\n\tpowderblue: 'b0e0e6',\n\tpurple: '800080',\n\trebeccapurple: '639',\n\tred: 'f00',\n\trosybrown: 'bc8f8f',\n\troyalblue: '4169e1',\n\tsaddlebrown: '8b4513',\n\tsalmon: 'fa8072',\n\tsandybrown: 'f4a460',\n\tseagreen: '2e8b57',\n\tseashell: 'fff5ee',\n\tsienna: 'a0522d',\n\tsilver: 'c0c0c0',\n\tskyblue: '87ceeb',\n\tslateblue: '6a5acd',\n\tslategray: '708090',\n\tslategrey: '708090',\n\tsnow: 'fffafa',\n\tspringgreen: '00ff7f',\n\tsteelblue: '4682b4',\n\ttan: 'd2b48c',\n\tteal: '008080',\n\tthistle: 'd8bfd8',\n\ttomato: 'ff6347',\n\tturquoise: '40e0d0',\n\tviolet: 'ee82ee',\n\twheat: 'f5deb3',\n\twhite: 'fff',\n\twhitesmoke: 'f5f5f5',\n\tyellow: 'ff0',\n\tyellowgreen: '9acd32',\n};\nnames.transparent = '00000000';\nconst hexNames = flip(names);\napi.shouldHandleInput = input => names[input];\napi.toRgb = input => api.parse(names[input]).rgba;\napi.toRaw = rgba => rgba;\napi.toString = rgba => {\n\tif (rgba.a === 0) {\n\t\treturn 'transparent'\n\t}\n\tif (hasAlpha(rgba) && api.wanted === 'toName') {\n\t\treturn false\n\t}\n\tif (hasAlpha(rgba) && api.wanted === 'name') {\n\t\treturn `#${rgbToHex(rgba)}`\n\t}\n\tif (hasAlpha(rgba)) {\n\t\treturn api.print(api.options.alphaFormat, rgba)\n\t}\n\treturn hexNames[rgbToHex(rgba, true)] || false\n};\n\nfunction tinycolor(color, options) {\n\treturn new TinyColor(color, options)\n}\n/**\n * Are two TinyColor colours equivalent?\n *\n * @alias  tinycolor.equals\n * @param  {TinyColor}  color1  The first color\n * @param  {TinyColor}  color2  The second color\n * @return {boolean}    Equivalent or not?\n */\ntinycolor.equals = (color1, color2) => TinyColor.equals(color1, color2);\n/**\n * Register a TinyColor extension\n *\n * @alias  tinycolor.registerFormat\n * @param  {string}  id                   The plugin identifier\n * @param  {object}  [options={}]         Plugin options\n * @param  {string}  options.alphaFormat  rgb|hex\n * @param  {boolean} options.shortHex     Short hex codes #ABC, if possible\n * @param  {boolean} options.upperCaseHex User UPPER case hex\n * @return {TinyColorExtension}           The TinyColor extension\n */\ntinycolor.registerFormat = (id, options = {}) => TinyColor.registerFormat(id, options);\n/**\n * Create a new TinyColor from values from 0..1\n *\n * @alias  tinycolor.fromRatio\n * @param  {object}    color    The color values\n * @param  {object}    options  Options to pass to TinyColor constructor\n * @return {TinyColor}          A TinyColor instance\n */\ntinycolor.fromRatio = (color, options) => TinyColor.fromRatio(color, options);\n/**\n * Mix a second colour into the first\n *\n * @alias  tinycolor.mix\n * @param  {TinyColor}  color1  The first color\n * @param  {TinyColor}  color2  The second color\n * @param  {number}     amount  The mix amount of the second color\n * @return {TinyColor}\t\t\t   A new, mixed TinyColor instance\n */\ntinycolor.mix = (color1, color2, amount) => TinyColor.mix(color1, color2, amount);\n/**\n * How readable is the first color over the second color\n *\n * @alias  tinycolor.readability\n * @param  {TinyColor}  color1  The first color\n * @param  {TinyColor}  color2  The second color\n * @return {number}             The color contrast defined by (WCAG Version 2)\n */\ntinycolor.readability = (color1, color2) => TinyColor.readability(color1, color2);\n/**\n * Ensure that foreground and background color combinations meet WCAG2 guidelines.\n *\n * @alias  tinycolor.isReadable\n * @param   {TinyColor}        color1        The first color\n * @param   {TinyColor}        color2        The second color\n * @param   {object}           wcag2         The WCAG2 properties to test\n * @param   {object}           wcag2.level   The level to test \"AA\" or \"AAA\" (default \"AA\")\n * @param   {object}           wcag2.size    The content size to test \"large\" or \"small\" (default \"small\")\n * @example                                  tinycolor.isReadable(\"#000\", \"#111\") → false\n * @example                                  tinycolor.isReadable(\"#000\", \"#111\", {level:\"AA\",size:\"large\"}) → false\n * @return  {(boolean|number)} True if readable, False otherwise.\n */\ntinycolor.isReadable = (color1, color2, wcag2) => TinyColor.isReadable(color1, color2, wcag2);\n/**\n * Given a base color and a list of possible foreground or background colors for that\n * base, returns the most readable color.\n *\n * Optionally returns Black or White if the most readable color is unreadable.\n *\n * @alias  tinycolor.mostReadable\n * @param   {TinyColor}    baseColor                     The base color\n * @param   {[TinyColor]}  colorList                     An array of TinyColors\n * @param   {object}       [args={}]                     The arguments\n * @param   {boolean}      args.includeFallbackColors    Include fallback colors?\n * @param   {object}       args.level                    The level to test \"AA\" or \"AAA\" (default \"AA\")\n * @param   {object}       args.size                     The content size to test \"large\" or \"small\" (default \"small\")\n * @example tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n * @example tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n * @example tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"], {includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n * @example tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"], {includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\n * @return  {TinyColor}    A TinyColor instance of the msot readable color.\n */\ntinycolor.mostReadable = (baseColor, colorList, args) => TinyColor.mostReadable(baseColor, colorList, args);\n/**\n * Named Colours (as per CSS color names)\n */\ntinycolor.names = names;\n\nexport { TinyColor, names, tinycolor };\n"],
  "mappings": "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",
  "names": ["api"]
}
