import{_ as a}from"./chunks/DocsPackageVersion.6538ce64.js";import{o as i,c as n,a as e,b as t,t as s,d as l,e as r}from"./app.a7153c8d.js";const c={id:"frontmatter-title",tabindex:"-1"},u=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),d=e("div",{class:"warning custom-block"},[e("p",{class:"custom-block-title"},"0.X ALPHA STATUS"),e("p",null,[t("VueVentus is in a 0.x ("),e("strong",null,"alpha"),t(") status. It is in an post-experimental stage, and is suitable for rapid prototyping, but modules and components could change between minor releases. Additionally, there's more components and modules coming!")])],-1),f=r('<ul><li><a href="/vueventus/modules/configs/anchors.html">Anchors Config</a></li><li><a href="/vueventus/modules/configs/buttons.html">Buttons Config</a></li><li><a href="/vueventus/modules/configs/inputs.html">Inputs Config</a></li><li><a href="/vueventus/modules/configs/text.html">Text Config</a></li><li><a href="/vueventus/modules/configs/transitions.html">Transitions Config</a></li><li><a href="/vueventus/modules/configs/vv-config.html">VvConfig</a></li><li><a href="/vueventus/modules/configs/app-specific-config.html">App Specific Config</a></li></ul>',1),m={class:"info custom-block"},p=e("p",{class:"custom-block-title"},"ABOUT CONFIG MODULES",-1),h=e("code",null,"@apply",-1),C=JSON.parse('{"title":"Config Modules","description":"","frontmatter":{"title":"Config Modules"},"headers":[],"relativePath":"modules/configs/index.md","lastUpdated":1655144824000}'),_={name:"modules/configs/index.md"},T=Object.assign(_,{setup(g){return(o,v)=>(i(),n("div",null,[e("h1",c,[t(s(o.$frontmatter.title)+" ",1),u]),d,e("p",null,s(o.$frontmatter.title)+" keep reusable and customizable groups of non-color orientated Tailwind CSS classes for use in element, component, and layout levels of an application.",1),f,e("div",m,[p,e("p",null,[t(s(o.$frontmatter.title)+" are like the Tailwind CSS ",1),h,t(" directive, but are instead managed outside of the CSS scope. "+s(o.$frontmatter.title)+" rely on the Tailwind purge process, which allows JavaScript and JSON atomic classes data to be used throughout the JavaScript stack in a fully DRY way.",1)])]),l(a)]))}});export{C as __pageData,T as default};
