import{_ as l}from"./chunks/DocsPackageVersion.1abc625d.js";import{o,c as p,a as s,b as e,t as a,d as t,e as r}from"./app.d2fbc225.js";const D={id:"frontmatter-title",tabindex:"-1"},c=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),F=r("",20),q=JSON.parse('{"title":"Theme Overrides","description":"","frontmatter":{"title":"Theme Overrides"},"headers":[{"level":2,"title":"theme.fontSize.json","slug":"theme-fontsize-json"},{"level":2,"title":"theme.listStyleType.json","slug":"theme-liststyletype-json"},{"level":2,"title":"theme.opacity.json","slug":"theme-opacity-json"},{"level":2,"title":"theme.screens.json","slug":"theme-screens-json"}],"relativePath":"modules/data/theme-overrides.md","lastUpdated":1659758294000}'),y={name:"modules/data/theme-overrides.md"},m=Object.assign(y,{setup(C){return(n,u)=>(o(),p("div",null,[s("h1",D,[e(a(n.$frontmatter.title)+" ",1),c]),s("p",null,"VueVentus "+a(n.$frontmatter.title)+" are simple and static JSON object data files that contain Tailwind CSS specific property names and values for your app's Tailwind CSS config file.",1),s("p",null,a(n.$frontmatter.title)+" themselves sometimes add entirely new nomenclature to Tailwind CSS defaults, and therefore don't necessarily follow the naming conventions of Tailwind's awesome defaults. That said, the naming conventions used aren't far off in most cases.",1),F,t(l)]))}});export{q as __pageData,m as default};
